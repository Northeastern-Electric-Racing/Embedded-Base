{#
    This is a Jinja template, everything in {{ }} or {% %} brackets is replaced with C code.
    Code inside brackets are Python snippets.

    Note: dont use tabs in C code, replace them with four spaces (tabs cause weird formatting issues). 

    This file creates the decoder functions given a list of CANMsg objects.
-#}


{% import "templates/macros.j2" as macros -%}
#include "decoders.h"

{% for msg in can_msgs -%}
void receive_{{ macros.function_name(msg) }}(can_msg_t message, {{macros.function_name(msg) }}_t *{{macros.function_name(msg) }}) {
    uint8_t data[8] = message.data;
    endian_swap(&data, {{ macros.msg_size(msg) }});
    
    bitstream_t bitstream;
	uint8_t bitstream_data[{{ macros.msg_size(msg) }}];
	bitstream_init(&bitstream, bitstream_data, {{ macros.msg_size(msg) }});
    bitstream_add(&bitstream, data, {{ macros.msg_size(msg) }} * 8);
    {% for field in msg.fields -%}
    {% for value in field["values"] -%}
    {% set point = msg.points[value - 1] %}
    {{macros.function_name(msg) -}}->{{- macros.field_name(field, loop.index) }} = bitstream_remove(&bitstream, {{ point.size }});
{%- endfor %}
{%- endfor %}
}

{% endfor %}