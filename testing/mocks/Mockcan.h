/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCAN_H
#define _MOCKCAN_H

#include "unity.h"
#include "can.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockcan_Init(void);
void Mockcan_Destroy(void);
void Mockcan_Verify(void);




#define can_init_Expect(can) TEST_FAIL_MESSAGE("can_init requires _ExpectAndReturn");
#define can_init_ExpectAndReturn(can, cmock_retval) can_init_CMockExpectAndReturn(__LINE__, can, cmock_retval)
void can_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, can_t* can, HAL_StatusTypeDef cmock_to_return);
#define can_add_filter_standard_Expect(can, can_id_list) TEST_FAIL_MESSAGE("can_add_filter_standard requires _ExpectAndReturn");
#define can_add_filter_standard_ExpectAndReturn(can, can_id_list, cmock_retval) can_add_filter_standard_CMockExpectAndReturn(__LINE__, can, can_id_list, cmock_retval)
void can_add_filter_standard_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, can_t* can, uint16_t* can_id_list, HAL_StatusTypeDef cmock_to_return);
#define can_add_filter_extended_Expect(can, can_id_list) TEST_FAIL_MESSAGE("can_add_filter_extended requires _ExpectAndReturn");
#define can_add_filter_extended_ExpectAndReturn(can, can_id_list, cmock_retval) can_add_filter_extended_CMockExpectAndReturn(__LINE__, can, can_id_list, cmock_retval)
void can_add_filter_extended_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, can_t* can, uint32_t* can_id_list, HAL_StatusTypeDef cmock_to_return);
#define can_send_msg_Expect(can, msg) TEST_FAIL_MESSAGE("can_send_msg requires _ExpectAndReturn");
#define can_send_msg_ExpectAndReturn(can, msg, cmock_retval) can_send_msg_CMockExpectAndReturn(__LINE__, can, msg, cmock_retval)
void can_send_msg_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, can_t* can, can_msg_t* msg, HAL_StatusTypeDef cmock_to_return);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
